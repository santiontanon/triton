/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package triton;

import PNGtoMSX.ConvertPatternsToAssembler;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import javax.imageio.ImageIO;
import util.APLib;
import util.Pletter;
import util.Z80Assembler;

/**
 *
 * @author santi
 */
public class ExtractSprites {
    public static void main(String args[]) throws Exception
    {
        String outputFolder = "src/autogenerated";
        String spritesFileName = "data/sprites.png";
        BufferedImage img = ImageIO.read(new File(spritesFileName));
        
        ConvertPatternsToAssembler.MSX1Palette = ExtractTiles.MSX1Palette;
        List<int[]> sprites = extractSprites(img);
        List<int[]> base_sprites = new ArrayList<>();
//        List<int[]> explosion_sprites = new ArrayList<>();
//        List<int[]> enemy1_sprites = new ArrayList<>();
        
        // separate the first 6 sprites, which is the ship explosion:
//        for(int i = 0;i<6;i++) {
//            explosion_sprites.add(sprites.remove(0));
//        }

//        for(int i = 0;i<17;i++) {
        for(int i = 0;i<6+17+12+1+7+4+4;i++) {
            base_sprites.add(sprites.remove(0));
        }

//        for(int i = 0;i<12;i++) {
//            enemy1_sprites.add(sprites.remove(0));
//        }
        
//        System.out.println("Explosion sprites: " + explosion_sprites.size());
        System.out.println("Base sprites: " + base_sprites.size());
//        System.out.println("Enemy moai sprites: " + enemy1_sprites.size());
        System.out.println("Left over sprites: " + sprites.size());

//        saveSprites(explosion_sprites, outputFolder, "sprites-explosion");
        saveSprites(base_sprites, outputFolder, "sprites-ingame");
//        saveSprites(enemy1_sprites, outputFolder, "sprites-moai");
    }
    
    
    public static void saveSprites(List<int[]> sprites, String outputFolder, String name) throws Exception
    {
        List<Integer> bytes = new ArrayList<>();
        for(int sprite[]:sprites) {
            for(int b:sprite) bytes.add(b);
        }
        
        System.out.println("Raw size: " + bytes.size());
        String fileName = outputFolder + "/" + name;
        FileWriter fw = new FileWriter(fileName + ".asm");
        Z80Assembler.dataBlockToAssembler(bytes, "sprites", fw, 16);
        fw.flush();
        fw.close();

        nl.grauw.glass.Assembler.main(new String[]{fileName + ".asm", fileName + ".bin"});
        Pletter.intMain(new String[]{fileName + ".bin", fileName + ".plt"});    
        APLib.main(fileName + ".bin", fileName + ".apl", true);
    }
    
    
    public static List<int[]> extractSprites(BufferedImage img) throws Exception
    {
        List<int[]> sprites = new ArrayList<>();
        
        for(int y = 0; y<img.getHeight(); y+=16) {
            for(int x = 0; x<img.getWidth(); x+=16) {
                extractSprites(img, x, y, sprites);
            }
        }
        
        return sprites;
    }
    
    
    public static void extractSprites(BufferedImage img, int x, int y, List<int[]> sprites) throws Exception
    {
        HashMap<Integer, int[]> colorSprites = new HashMap<>();
        for(int i = 0; i<16; i++) {
            for(int j = 0; j<16; j++) {
                int color = img.getRGB(x+j, y+i);
                int r = (color & 0xff0000)>>16;
                int g = (color & 0x00ff00)>>8;
                int b = color & 0x0000ff;
                int a = (color & 0xff000000)>>24;
                if (a == 0) {
                    // transparnt pixel, ignoring
                } else {
                    int msxColor = ConvertPatternsToAssembler.findMSXColor(r, g, b, ExtractTiles.TOLERANCE);
                    if (msxColor==-1) throw new Exception("Undefined color at " + (x+j) + ", " + (y+i) + ": " + r + ", " + g + ", " + b);
                    int sprite[] = colorSprites.get(msxColor);
                    if (sprite == null) {
                        sprite = new int[32];
                        colorSprites.put(msxColor, sprite);
                    }
                    if (j<8) {
                        int mask = 1<<(7-j);
                        sprite[i] |= mask;
                    } else {
                        int mask = 1<<(15-j);
                        sprite[16+i] |= mask;
                    }
                }
            }
        }
        for(int color = 0;color<16;color++) {
            if (colorSprites.containsKey(color)) {
                sprites.add(colorSprites.get(color));
            }
        }
    }
}
