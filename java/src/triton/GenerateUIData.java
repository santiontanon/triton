package triton;

import PNGtoMSX.ConvertNonEmptyPatternsToAssembler;
import PNGtoMSX.ConvertPatternsToAssembler;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileWriter;
import java.util.List;
import javax.imageio.ImageIO;
import util.APLib;
import util.Pletter;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author santi
 */
public class GenerateUIData {
    public static final int TOLERANCE = 40;
    
    public static int MSX1Palette[][]={
                                {0,0,0},              // Transparent
                                {0,0,0},              // Black
                                {36,219,36},          // Medium Green
                                {109,255,109},        // Light Green
                                {36,36,255},          // Dark Blue
                                {73,109,255},         // Light Blue
                                {182,36,36},          // Dark Red
                                {73,219,255},         // Cyan
                                {255,36,36},          // Medium Red
                                {255,109,109},        // Light Red
                                {219,219,36},         // Dark Yellow
                                {219,219,146},        // Light Yellow
                                {36,146,36},          // Dark Green
                                {219,73,182},         // Magenta
                                {182,182,182},        // Grey
                                {255,255,255}};       // White        
    
    
    public static void main(String args[]) throws Exception
    {
        String tilesFileName = "data/triton-ui-tiles.png";
        String spritesFileName = "data/triton-ui-sprites.png";
        String outputFileName = "src/autogenerated/ui-tiles";
                
        ConvertPatternsToAssembler.MSX1Palette = MSX1Palette;
        
        convertNonEmptyPatternsToAssemblerGroupped(tilesFileName, outputFileName+".asm", TOLERANCE);
        nl.grauw.glass.Assembler.main(new String[]{outputFileName+".asm", outputFileName+".bin"});
        Pletter.intMain(new String[]{outputFileName+".bin", outputFileName+".plt"});        
        APLib.main(outputFileName + ".bin", outputFileName + ".apl", true);
        

        BufferedImage img = ImageIO.read(new File(spritesFileName));
        ConvertPatternsToAssembler.MSX1Palette = ExtractTiles.MSX1Palette;
        List<int[]> sprites = ExtractSprites.extractSprites(img);
        System.out.println("# sprites: " + sprites.size());
        ExtractSprites.saveSprites(sprites, "src/autogenerated", "sprites-ui");
    }
    
    
    // Converts an image to assembler, where every tile is a block of 16 bytes: 8 for the pattern and 8 for the attributes
    public static void convertNonEmptyPatternsToAssemblerGroupped(String inputFile, String outputFile, int tolerance) throws Exception {
        System.out.println("Converting " + inputFile);
        File f = new File(inputFile);
        BufferedImage sourceImage = ImageIO.read(f);
        FileWriter fw = new FileWriter(new File(outputFile));
        // determine the size:
        int n_patterns = 0;    // 8 bytes per pattern
        for(int i = 0;i<256;i++) {
            int x = i%16;
            int y = i/16;
            String line = ConvertNonEmptyPatternsToAssembler.generateAssemblerPatternBitmap(x ,y, sourceImage, tolerance);
            if (line != null) n_patterns++;
        }

        fw.write("    org #0000\n\n");
        fw.write("; # of patterns: " + n_patterns + "\n");
        fw.write("patternAttributeData:\n");
        for(int i = 0;i<256;i++) {
            int x = i%16;
            int y = i/16;
            String line = ConvertNonEmptyPatternsToAssembler.generateAssemblerPatternBitmap(x, y, sourceImage, tolerance);
            if (line != null) fw.write(line + "\n");
            line = ConvertNonEmptyPatternsToAssembler.generateAssemblerPatternattributes(x, y, sourceImage, tolerance);
            if (line != null) fw.write(line + "\n");
        }
        fw.close();
    }
    
}
